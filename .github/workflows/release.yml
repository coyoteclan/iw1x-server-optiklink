name: Optiklink Release

on:
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debugging information, disable optimization'
        required: true
        default: 'OFF'
        type: choice
        options:
        - 'ON'
        - 'OFF'
      unsafe:
        description: 'Enable unsafe features (fread, fwrite...)'
        required: true
        default: 'ON'
        type: choice
        options:
        - 'ON'
        - 'OFF'
      sqlite:
        description: 'SQLite support'
        required: true
        default: 'OFF'
        type: choice
        options:
        - 'ON'
        - 'OFF'
      curl:
        description: 'cURL support'
        required: true
        default: 'OFF'
        type: choice
        options:
        - 'ON'
        - 'OFF'
      ssl:
        description: 'SSL support (hash)'
        required: true
        default: 'OFF'
        type: choice
        options:
        - 'ON'
        - 'OFF'

permissions:
  contents: write
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      BDEBUG: ${{ inputs.debug || 'OFF' }}
      BUNSAFE: ${{ inputs.unsafe || 'ON' }}
      BSQLITE: ${{ inputs.sqlite || 'OFF' }}
      BCURL: ${{ inputs.curl || 'OFF' }}
      BSSL: ${{ inputs.ssl || 'OFF' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          # Add i386 architecture so that 32-bit packages can be installed
          sudo dpkg --add-architecture i386
          sudo apt-get update

          # Required for building
          sudo apt-get install -y g++-multilib cmake libsqlite3-dev:i386 libcurl4-openssl-dev:i386 libssl-dev:i386

      - name: Configure Build
        run: |
          mkdir -p build
          cd build
          cmake .. -DDEBUG_BUILD=$BDEBUG -DENABLE_UNSAFE=$BUNSAFE -DCOMPILE_SQLITE=$BSQLITE -DCOMPILE_CURL=$BCURL -DCOMPILE_SSL=$BSSL

      - name: Build
        run: |
          cd build
          make

      - name: Get Current Date and Time
        id: get_datetime
        run: echo "datetime=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: false
          prerelease: false
          release_name: ${{ env.datetime }}
          tag_name: ${{ github.ref }}
          body: Automated release

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: build/iw1x.so
          asset_name: iw1x.so
          asset_content_type: application/octet-stream